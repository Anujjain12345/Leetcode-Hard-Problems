#include <iostream>
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define ull unsigned long long
#define pb push_back
#define pob pop_back
#define mp make_pair
#define f(n) for(int i=0;i<n;i++)
#define PI 3.1415926536
#define MOD 1073741824
const ll INF = 1e9+7;
 
 
int fact(ll n)
{
    return (n==1 || n==0) ? 1: n * fact(n - 1);
}
int countDivisors(ll n)
{
    int cnt = 0;
    for (ll i = 1; i <= sqrt(n); i++) {
        if (n % i == 0) {
            // If divisors are equal,
            // count only one
            if (n / i == i)
                cnt++;
 
            else // Otherwise count both
                cnt = cnt + 2;
        }
    }
    return cnt;
}
//Palindrome Check
int isPalindrome(string s)
{
    // Start from leftmost and rightmost corners of str
    int l = 0;
    int h = s.length() - 1;
 
    // Keep comparing characters while they are same
    while (h > l)
    {
        if (s[l++] != s[h--])
        {
            return 0;
        }
    }
   return 1;
}
int gcd(int a, int b) {
   if (b == 0)
   return a;
   return gcd(b, a % b);
}
bool Primecheck(ll n)
{
    for(int i=2;i*i<=n;i++)
    {
        if(n%i==0){ return false;}
    }
    return true;
}
bool comp(pair<ll,ll> &a, pair<ll,ll>&b)
{
    if(a.first!=b.first)
    {
        return (a.first<b.first);
    }
    else{
        return(a.second>b.second);
    }
}
int highestPowerof2(int n)
{
    int res = 0;
    for (int i=n; i>=1; i--)
    {
        // If i is a power of 2
        if ((i & (i-1)) == 0)
        {
            res = i;
            break;
        }
    }
    return res;
}
 
 void solve(){
    vector<string>v;
    string s;
    int c=0;
    for(int i=0;i<8;i++){
        cin>>s;
        v.pb(s);
    }
    for(auto k:v){
        if(k=="RRRRRRRR"){
            cout<<"R"<<endl;return;
        }
    }
    cout<<"B"<<endl;return;
 }


    
    


    





   
  


 

   
int main(){
      
      ll t;
      cin>>t;
      //t=1;
      while(t--){
        solve();
        
      }
      return 0;
}
